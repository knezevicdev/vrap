def image = "docker"
def label = "${image}-${UUID.randomUUID().toString()}"
def volume = "dockersock"
def path = "/var/run/docker.sock"

podTemplate(label: label, yaml: """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: ${image}
    image: ${image}
    tty: true
    volumeMounts:
    - name: ${volume}
      mountPath: ${path}
  volumes:
  - name: ${volume}
    hostPath:
      path: ${path}
""") {

    node(label) {
        try {
            deleteDir() //Clean workspace

            // Handle input parameters
            // test_repo is required
            def test_repo = "${env.TEST_REPO}"
            def test_repo_docker_arg = "-e TEST_REPO=${env.TEST_REPO} "
            def test_env_arg = "-e TEST_ENV=${env.TEST_ENV} "

            def test_branch = "dev"
            if (env.TEST_BRANCH != null) {
                test_branch = "${env.TEST_BRANCH}"
                test_branch_docker_arg = "-e TEST_BRANCH=${env.TEST_BRANCH} "
            }

            echo test_repo
            echo test_branch
            echo test_env_arg

            def uniq_container = "running_dev_team-" + UUID.randomUUID().toString() //Generate unique docker container name
            def uniq_tag = "dev_team-" + UUID.randomUUID().toString()
            stage("Clone Repository") {
                container(image) {
                    checkout([$class: 'GitSCM', branches: [[name: '*/sonarSetup']],
                    doGenerateSubmoduleConfigurations: false, extensions: [],
                    submoduleCfg: [],
                    userRemoteConfigs: [[credentialsId: 'gkeller-github-credentials', url: 'https://bitbucket.org/tdalabs/vroom-web/']
                    ]])
                }
            }

            stage("Docker Build & Run Tests") {
                container(image) {
                    withCredentials([sshUserPrivateKey(credentialsId: 'BITBUCKET_SSH_KEY', keyFileVariable: 'BITBUCKET_SSH_KEY')]) {
                        sh "mkdir -p ~/.ssh"
                        sh "cp \"\$BITBUCKET_SSH_KEY\" ~/.ssh/id_rsa"
                        sh """DOCKER_BUILDKIT=1 docker build --network="host" --ssh=default=\$HOME/.ssh/id_rsa -f ./apps/product/testing-docker/Dockerfile -t tests:latest ."""
                        sh "cp \"\$BITBUCKET_SSH_KEY\" ~/.ssh/id_rsa"
                    }
                }
            }
        } catch (e) {
            // If there was an exception thrown, the build failed
            currentBuild.result = "FAILED"
            throw e
        } finally {
            container(image) {
              sh "docker system prune -af"
            }

            deleteDir() //Always clean up after the job
        }
    }
}

def notifyBuild(String buildStatus = 'STARTED', String channelName = 'jenkins-go-tests') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"
  def details = """<p>STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  channelName = 'jenkins-go-tests'
  slackSend (channel: channelName, color: colorCode, message: summary)
}

def gitCheckThatOut(String branch, String vcsUrl) {
    branch =  branch ?: 'master'
    //  cleanup
    gitClean()
    // checkout
    git branch: "${branch}", url: "${vcsUrl}"
    // get last tag
    sh "git describe --abbrev=0 --tags > .git/tagName"
    tagName = readFile('.git/tagName')
    echo "${tagName}"
    // set DisplayName
    currentBuild.displayName = tagName
}